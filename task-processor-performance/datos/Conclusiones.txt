Al menos en Windows
- Nada le gana al for infinito (si es una operación de puro cálculo lo mejor es diseñarla mono thread). 217192 ticks/s (25% del procesador)
- Incluso ejecutar ese for infinito en un thread independiente del main tiene penalizacion de performance. 158334 ticks/s (26% proc.)

- Una VM en mono thread sólo utiliza sólo una parte de los cores al máximo, dejando margen para el resto (tengo 4 cores, utiliza el 25%)
- Por lo que lei, VM le delega el manejo de threads al S.O. que se encarga de asignarle cores. La VM no tiene elección sobre que core se ejecutan las cosas.
- Aunque sea un mono thread no se utiliza un unico core. Su carga la balancea el S.O. para que no caiga siempre en el mismo core (la vm no tiene processor affinity)

- Al utilizar varios threads en la misma VM se producen esperas innecesarias entre ellos, que no aprovechan bien los cores.
 (en mi maquina con 4 cores, si disparo 4 threads usa el 100% de los cores, pero su performance es peor que 1 sólo thread haciendo lo mismo. 6136 ticks/s vs 158334 ticks/s)
- Ejecutando Vms en paralelo se logra mejor performance que varios threads en una sóla VM. 858732 ticks/s (100% proc, 4 Vms).
- Si se ejecutan más Vms que cores es posible lograr un pico mejor de performance, pero es apenas superior (y consume doble memoria). 914424 ticks/s (100% proc, 8VMs)

- Utilizar elementos de sincronización como locks (sólo agrega tiempos de bloqueo de threads), observable como "monitor" en VisualVM
- Si se utilizan elementos de Sync las esperas son mejor distribuidas entre los threads. (Todos los threads esperan parecido). Seguramente por la fair policy de los locks.

- Independientemente de cual sea la forma más optima de procesar, para implementar un procesador se debe elegir un punto máximo, tomado
como 0 y comparar contra ese las implementaciones. Ese punto debería ser comparable, por lo que no importa que sea el mejor de todos los modelos posibles,
si no el mejor entre todas las comparaciones.

Eso quiere decir que descartando la posibilidad de ejecutar varias vms a la vez, y tomando que se van a ejecutar con threads
y con unidades WorkUnit. El caso 0, debería ser el más rápido en esas condiciones. Olvidando lo del mono-thread. 


- En linux pareciera existir cierta afinidad entre las VMs y el uso de los cores (al menos al correr 2 VM hay 2 cores al mango)

Preguntas:
- En linux tambien hay tanta dif entre vm/proceso y threads?
